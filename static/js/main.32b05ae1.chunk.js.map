{"version":3,"sources":["components/Addtodo.js","components/Todo.js","components/Header.js","App.js","index.js"],"names":["Addtodo","state","title","onChange","e","setState","target","value","className","this","type","onClick","props","onSubmit","bind","Component","Todo","dispatch","payload","id","posts","length","map","post","key","checked","complete","style","textDecoration","Fragment","connect","Header","App","initState","store","createStore","action","tempPosts","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"6TAGqBA,G,6NACjBC,MAAQ,CACJC,MAAO,I,EAGXC,SAAW,SAAAC,GACP,EAAKC,SAAS,CAAEH,MAAOE,EAAEE,OAAOC,S,wEAIhC,OACI,yBAAKC,UAAU,WACX,2BAAOL,SAAUM,KAAKN,SAAUO,KAAK,SACrC,4BACIC,QAASF,KAAKG,MAAMC,SAASC,KAAKL,KAAMA,KAAKR,MAAMC,QADvD,e,GAbqBa,c,WCU/BC,E,2MACFb,SAAW,SAAAC,GAEP,EAAKQ,MAAMK,SAAS,CAAEP,KAAM,WAAYQ,QAASd,EAAEE,OAAOC,S,EAG9DM,SAAW,SAAAX,GACP,IAAMiB,EAAK,EAAKP,MAAMQ,MAAMC,OAAS,EACrC,EAAKT,MAAMK,SAAS,CAAEP,KAAM,MAAOQ,QAAS,CAAEC,KAAIjB,Y,wEAG5C,IAAD,OACCkB,EAAQX,KAAKG,MAAMQ,MAAME,KAAI,SAAAC,GAC/B,OACI,yBAAKf,UAAU,OAAOgB,IAAKD,EAAKJ,IAC5B,2BACIhB,SAAU,EAAKA,SACfO,KAAK,WACLH,MAAOgB,EAAKJ,GACZM,QAASF,EAAKG,SAAW,UAAY,KAEzC,uBACIC,MACIJ,EAAKG,SACC,CAAEE,eAAgB,gBAClB,IAGTL,EAAKrB,WAMtB,OACI,kBAAC,IAAM2B,SAAP,KACKT,EACD,kBAAC,EAAD,CAASP,SAAUJ,KAAKI,gB,GArCrBE,aA2CJe,eAjDf,SAAyB7B,GACrB,MAAO,CACHmB,MAAOnB,EAAMmB,SA+CNU,CAAyBd,GCtDzB,SAASe,IACpB,OAAO,oC,ICaIC,E,iLATP,OACI,yBAAKxB,UAAU,QACX,kBAACuB,EAAD,MACA,kBAAC,EAAD,W,GALEhB,a,OCGZkB,EAAY,CACdb,MAAO,CACH,CACID,GAAI,EACJjB,MAAO,OACPwB,UAAU,GAEd,CACIP,GAAI,EACJjB,MAAO,OACPwB,UAAU,KAoChBQ,EAAQC,aA/BM,WAAgC,IAA/BlC,EAA8B,uDAAtBgC,EAAWG,EAAW,uCAC/C,OAAQA,EAAO1B,MACX,IAAK,MACD,MAAO,CACHU,MAAM,GAAD,mBACEnB,EAAMmB,OADR,CAED,CACID,GAAIiB,EAAOlB,QAAQC,GACnBjB,MAAOkC,EAAOlB,QAAQhB,MACtBwB,UAAU,MAI1B,IAAK,WACD,IAAMW,EAAYpC,EAAMmB,MAAME,KAAI,SAAAC,GAK9B,OAJIA,EAAKJ,IAAMiB,EAAOlB,UAClBK,EAAKG,UAAYH,EAAKG,UAGnBH,KAIX,MAAO,CAAEH,MAAOiB,GAGpB,QACI,OAAOpC,KAMfqC,OAAOC,8BAAgCD,OAAOC,gCAGlDC,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJQ,SAASC,eAAe,W","file":"static/js/main.32b05ae1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Addtodo.css';\r\n\r\nexport default class Addtodo extends Component {\r\n    state = {\r\n        title: ''\r\n    };\r\n\r\n    onChange = e => {\r\n        this.setState({ title: e.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addtodo\">\r\n                <input onChange={this.onChange} type=\"text\" />\r\n                <button\r\n                    onClick={this.props.onSubmit.bind(this, this.state.title)}\r\n                >\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport './Todo.css';\r\nimport Addtodo from './Addtodo';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        posts: state.posts\r\n    };\r\n}\r\n\r\nclass Todo extends Component {\r\n    onChange = e => {\r\n        //console.log(e.target.value);\r\n        this.props.dispatch({ type: 'COMPLETE', payload: e.target.value });\r\n    };\r\n\r\n    onSubmit = title => {\r\n        const id = this.props.posts.length + 1;\r\n        this.props.dispatch({ type: 'ADD', payload: { id, title } });\r\n    };\r\n\r\n    render() {\r\n        const posts = this.props.posts.map(post => {\r\n            return (\r\n                <div className=\"todo\" key={post.id}>\r\n                    <input\r\n                        onChange={this.onChange}\r\n                        type=\"checkbox\"\r\n                        value={post.id}\r\n                        checked={post.complete ? 'checked' : ''}\r\n                    />\r\n                    <p\r\n                        style={\r\n                            post.complete\r\n                                ? { textDecoration: 'line-through' }\r\n                                : {}\r\n                        }\r\n                    >\r\n                        {post.title}\r\n                    </p>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {posts}\r\n                <Addtodo onSubmit={this.onSubmit} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Todo);\r\n","import React from 'react';\r\n\r\nexport default function Header() {\r\n    return <h1>TODO</h1>;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\nimport Header from './components/Header';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"main\">\n                <Header />\n                <Todo />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst initState = {\n    posts: [\n        {\n            id: 1,\n            title: 'id-1',\n            complete: false\n        },\n        {\n            id: 2,\n            title: 'id-2',\n            complete: true\n        }\n    ]\n};\n\nconst postReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'ADD':\n            return {\n                posts: [\n                    ...state.posts,\n                    {\n                        id: action.payload.id,\n                        title: action.payload.title,\n                        complete: false\n                    }\n                ]\n            };\n        case 'COMPLETE': {\n            const tempPosts = state.posts.map(post => {\n                if (post.id == action.payload) {\n                    post.complete = !post.complete;\n                    //console.log(post.complete);\n                }\n                return post;\n            });\n\n            //console.log(tempPosts);\n            return { posts: tempPosts };\n        }\n\n        default:\n            return state;\n    }\n};\n\nconst store = createStore(\n    postReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}